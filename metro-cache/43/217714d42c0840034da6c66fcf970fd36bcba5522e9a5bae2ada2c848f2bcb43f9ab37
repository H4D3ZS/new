{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireWildcard","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"path-to-regexp","data":{"isAsync":false}},{"name":"../NavigationActions","data":{"isAsync":false}},{"name":"../utils/invariant","data":{"isAsync":false}},{"name":"query-string","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireWildcard\");\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createPathParser = exports.urlToPathAndParams = exports.getParamsFromPath = void 0;\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _pathToRegexp = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[3], \"path-to-regexp\"));\n\n  var NavigationActions = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], \"../NavigationActions\"));\n\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"../utils/invariant\"));\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  var queryString = _$$_REQUIRE(_dependencyMap[6], \"query-string\");\n\n  var getParamsFromPath = function getParamsFromPath(inputParams, pathMatch, pathMatchKeys) {\n    var params = pathMatch.slice(1).reduce(function (paramsOut, matchResult, i) {\n      var key = pathMatchKeys[i];\n\n      if (!key || key.asterisk) {\n        return paramsOut;\n      }\n\n      var paramName = key.name;\n      var decodedMatchResult;\n\n      if (matchResult) {\n        try {\n          decodedMatchResult = decodeURIComponent(matchResult);\n        } catch (e) {}\n      }\n\n      paramsOut[paramName] = decodedMatchResult || matchResult;\n      return paramsOut;\n    }, _objectSpread({}, inputParams));\n    return params;\n  };\n\n  exports.getParamsFromPath = getParamsFromPath;\n\n  var getRestOfPath = function getRestOfPath(pathMatch, pathMatchKeys) {\n    var rest = pathMatch[pathMatchKeys.findIndex(function (k) {\n      return k.asterisk;\n    }) + 1];\n    return rest;\n  };\n\n  var determineDelimiter = function determineDelimiter(uri, uriPrefix) {\n    if (Array.isArray(uriPrefix)) {\n      if (uriPrefix.length === 1) return uriPrefix[0];\n\n      for (var _iterator = uriPrefix, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var _prefix = _ref;\n        if (uri.startsWith(_prefix)) return _prefix;\n      }\n\n      return null;\n    }\n\n    return uriPrefix;\n  };\n\n  var urlToPathAndParams = function urlToPathAndParams(url, uriPrefix) {\n    var searchMatch = url.match(/^(.*)\\?(.*)$/);\n\n    var _ref2 = searchMatch || [null, url, {}],\n        _ref3 = (0, _slicedToArray2.default)(_ref2, 3),\n        urlWithoutQuery = _ref3[1],\n        query = _ref3[2];\n\n    var params = queryString.parse(query);\n    var delimiter = determineDelimiter(urlWithoutQuery, uriPrefix) || '://';\n    var path = urlWithoutQuery.split(delimiter)[1];\n\n    if (path === undefined) {\n      path = urlWithoutQuery;\n    }\n\n    if (path === '/') {\n      path = '';\n    }\n\n    if (path[path.length - 1] === '/') {\n      path = path.slice(0, -1);\n    }\n\n    return {\n      path: path,\n      params: params\n    };\n  };\n\n  exports.urlToPathAndParams = urlToPathAndParams;\n\n  var createPathParser = function createPathParser(childRouters, routeConfigs, _ref4) {\n    var _ref4$paths = _ref4.paths,\n        pathConfigs = _ref4$paths === void 0 ? {} : _ref4$paths,\n        disableRouteNamePaths = _ref4.disableRouteNamePaths;\n    var pathsByRouteNames = {};\n    var paths = [];\n    Object.keys(childRouters).forEach(function (routeName) {\n      var pathPattern;\n\n      if (pathConfigs[routeName] !== undefined) {\n        pathPattern = pathConfigs[routeName];\n      } else {\n        pathPattern = routeConfigs[routeName].path;\n      }\n\n      if (pathPattern === undefined) {\n        pathPattern = disableRouteNamePaths ? null : routeName;\n      }\n\n      (0, _invariant.default)(pathPattern === null || typeof pathPattern === 'string', \"Route path for \".concat(routeName, \" must be specified as a string, or null.\"));\n      var isPathMatchable = pathPattern !== null;\n      var exactReKeys = [];\n      var exactRe = isPathMatchable ? (0, _pathToRegexp.default)(pathPattern, exactReKeys) : null;\n      var extendedPathReKeys = [];\n      var isWildcard = pathPattern === '' || !isPathMatchable;\n      var extendedPathRe = (0, _pathToRegexp.default)(isWildcard ? '*' : \"\".concat(pathPattern, \"/*\"), extendedPathReKeys);\n      pathsByRouteNames[routeName] = {\n        exactRe: exactRe,\n        exactReKeys: exactReKeys,\n        extendedPathRe: extendedPathRe,\n        extendedPathReKeys: extendedPathReKeys,\n        isWildcard: isWildcard,\n        toPath: pathPattern === null ? function () {\n          return '';\n        } : (0, _pathToRegexp.compile)(pathPattern)\n      };\n    });\n    paths = Object.entries(pathsByRouteNames);\n\n    var getActionForPathAndParams = function getActionForPathAndParams() {\n      var pathToResolve = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var inputParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      for (var _iterator2 = paths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref7;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref7 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref7 = _i2.value;\n        }\n\n        var _ref11 = _ref7;\n\n        var _ref6 = (0, _slicedToArray2.default)(_ref11, 2);\n\n        var _routeName2 = _ref6[0];\n        var _path2 = _ref6[1];\n        var _exactRe = _path2.exactRe,\n            _exactReKeys = _path2.exactReKeys,\n            _extendedPathRe2 = _path2.extendedPathRe,\n            _extendedPathReKeys2 = _path2.extendedPathReKeys;\n        var _childRouter2 = childRouters[_routeName2];\n\n        var _exactMatch = _exactRe && _exactRe.exec(pathToResolve);\n\n        if (_exactMatch && _exactMatch.length) {\n          var _extendedMatch = _extendedPathRe2 && _extendedPathRe2.exec(pathToResolve);\n\n          var childAction = null;\n\n          if (_extendedMatch && _childRouter2) {\n            var restOfPath = getRestOfPath(_extendedMatch, _extendedPathReKeys2);\n            childAction = _childRouter2.getActionForPathAndParams(restOfPath, inputParams);\n          }\n\n          return NavigationActions.navigate({\n            routeName: _routeName2,\n            params: getParamsFromPath(inputParams, _exactMatch, _exactReKeys),\n            action: childAction\n          });\n        }\n      }\n\n      for (var _iterator3 = paths, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref10;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref10 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref10 = _i3.value;\n        }\n\n        var _ref12 = _ref10;\n\n        var _ref9 = (0, _slicedToArray2.default)(_ref12, 2);\n\n        var _routeName3 = _ref9[0];\n        var _path3 = _ref9[1];\n        var _extendedPathRe3 = _path3.extendedPathRe,\n            _extendedPathReKeys3 = _path3.extendedPathReKeys;\n        var _childRouter3 = childRouters[_routeName3];\n\n        var _extendedMatch2 = _extendedPathRe3 && _extendedPathRe3.exec(pathToResolve);\n\n        if (_extendedMatch2 && _extendedMatch2.length) {\n          var _restOfPath = getRestOfPath(_extendedMatch2, _extendedPathReKeys3);\n\n          var _childAction = null;\n\n          if (_childRouter3) {\n            _childAction = _childRouter3.getActionForPathAndParams(_restOfPath, inputParams);\n          }\n\n          if (!_childAction) {\n            continue;\n          }\n\n          return NavigationActions.navigate({\n            routeName: _routeName3,\n            params: getParamsFromPath(inputParams, _extendedMatch2, _extendedPathReKeys3),\n            action: _childAction\n          });\n        }\n      }\n\n      return null;\n    };\n\n    var getPathAndParamsForRoute = function getPathAndParamsForRoute(route) {\n      var routeName = route.routeName,\n          params = route.params;\n      var childRouter = childRouters[routeName];\n      var _pathsByRouteNames$ro = pathsByRouteNames[routeName],\n          toPath = _pathsByRouteNames$ro.toPath,\n          exactReKeys = _pathsByRouteNames$ro.exactReKeys;\n      var subPath = toPath(params);\n      var nonPathParams = {};\n\n      if (params) {\n        Object.keys(params).filter(function (paramName) {\n          return !exactReKeys.find(function (k) {\n            return k.name === paramName;\n          });\n        }).forEach(function (paramName) {\n          nonPathParams[paramName] = params[paramName];\n        });\n      }\n\n      if (childRouter) {\n        var child = childRouter.getPathAndParamsForState(route);\n        return {\n          path: subPath ? \"\".concat(subPath, \"/\").concat(child.path) : child.path,\n          params: child.params ? _objectSpread({}, nonPathParams, {}, child.params) : nonPathParams\n        };\n      }\n\n      return {\n        path: subPath,\n        params: nonPathParams\n      };\n    };\n\n    return {\n      getActionForPathAndParams: getActionForPathAndParams,\n      getPathAndParamsForRoute: getPathAndParamsForRoute\n    };\n  };\n\n  exports.createPathParser = createPathParser;\n});","lineCount":336,"map":[[13,0,8,0],[15,0,9,0],[17,0,10,0],[19,0,1,0],[19,11,1,9,"ownKeys"],[19,18,1,0],[19,19,1,17,"object"],[19,25,1,0],[19,27,1,25,"enumerableOnly"],[19,41,1,0],[19,43,1,41],[20,0,1,43],[20,8,1,47,"keys"],[20,12,1,51],[20,15,1,54,"Object"],[20,21,1,60],[20,22,1,61,"keys"],[20,26,1,54],[20,27,1,66,"object"],[20,33,1,54],[20,34,1,43],[22,0,1,75],[22,8,1,79,"Object"],[22,14,1,85],[22,15,1,86,"getOwnPropertySymbols"],[22,36,1,75],[22,38,1,109],[23,0,1,111],[23,10,1,115,"symbols"],[23,17,1,122],[23,20,1,125,"Object"],[23,26,1,131],[23,27,1,132,"getOwnPropertySymbols"],[23,48,1,125],[23,49,1,154,"object"],[23,55,1,125],[23,56,1,111],[24,0,1,163],[24,10,1,167,"enumerableOnly"],[24,24,1,163],[24,26,1,183,"symbols"],[24,33,1,190],[24,36,1,193,"symbols"],[24,43,1,200],[24,44,1,201,"filter"],[24,50,1,193],[24,51,1,208],[24,61,1,218,"sym"],[24,64,1,208],[24,66,1,223],[25,0,1,225],[25,15,1,232,"Object"],[25,21,1,238],[25,22,1,239,"getOwnPropertyDescriptor"],[25,46,1,232],[25,47,1,264,"object"],[25,53,1,232],[25,55,1,272,"sym"],[25,58,1,232],[25,60,1,277,"enumerable"],[25,70,1,225],[26,0,1,290],[26,7,1,193],[26,8,1,183],[27,0,1,293,"keys"],[27,6,1,293,"keys"],[27,10,1,297],[27,11,1,298,"push"],[27,15,1,293],[27,16,1,303,"apply"],[27,21,1,293],[27,22,1,309,"keys"],[27,26,1,293],[27,28,1,315,"symbols"],[27,35,1,293],[28,0,1,326],[30,0,1,327],[30,11,1,334,"keys"],[30,15,1,327],[31,0,1,341],[33,0,3,0],[33,11,3,9,"_objectSpread"],[33,24,3,0],[33,25,3,23,"target"],[33,31,3,0],[33,33,3,31],[34,0,3,33],[34,9,3,38],[34,13,3,42,"i"],[34,14,3,43],[34,17,3,46],[34,18,3,33],[34,20,3,49,"i"],[34,21,3,50],[34,24,3,53,"arguments"],[34,33,3,62],[34,34,3,63,"length"],[34,40,3,33],[34,42,3,71,"i"],[34,43,3,72],[34,45,3,33],[34,47,3,76],[35,0,3,78],[35,10,3,82,"source"],[35,16,3,88],[35,19,3,91,"arguments"],[35,28,3,100],[35,29,3,101,"i"],[35,30,3,100],[35,31,3,91],[35,35,3,107],[35,39,3,91],[35,42,3,114,"arguments"],[35,51,3,123],[35,52,3,124,"i"],[35,53,3,123],[35,54,3,91],[35,57,3,129],[35,59,3,78],[37,0,3,133],[37,10,3,137,"i"],[37,11,3,138],[37,14,3,141],[37,15,3,133],[37,17,3,144],[38,0,3,146,"ownKeys"],[38,8,3,146,"ownKeys"],[38,15,3,153],[38,16,3,154,"Object"],[38,22,3,160],[38,23,3,161,"source"],[38,29,3,160],[38,30,3,153],[38,32,3,170],[38,36,3,153],[38,37,3,146],[38,38,3,176,"forEach"],[38,45,3,146],[38,46,3,184],[38,56,3,194,"key"],[38,59,3,184],[38,61,3,199],[39,0,3,201,"_defineProperty"],[39,10,3,201,"_defineProperty"],[39,25,3,216],[39,26,3,217,"target"],[39,32,3,216],[39,34,3,225,"key"],[39,37,3,216],[39,39,3,230,"source"],[39,45,3,236],[39,46,3,237,"key"],[39,49,3,236],[39,50,3,216],[39,51,3,201],[40,0,3,245],[40,9,3,146],[41,0,3,249],[41,7,3,133],[41,13,3,255],[41,17,3,259,"Object"],[41,23,3,265],[41,24,3,266,"getOwnPropertyDescriptors"],[41,49,3,255],[41,51,3,293],[42,0,3,295,"Object"],[42,8,3,295,"Object"],[42,14,3,301],[42,15,3,302,"defineProperties"],[42,31,3,295],[42,32,3,319,"target"],[42,38,3,295],[42,40,3,327,"Object"],[42,46,3,333],[42,47,3,334,"getOwnPropertyDescriptors"],[42,72,3,327],[42,73,3,360,"source"],[42,79,3,327],[42,80,3,295],[43,0,3,371],[43,7,3,255],[43,13,3,377],[44,0,3,379,"ownKeys"],[44,8,3,379,"ownKeys"],[44,15,3,386],[44,16,3,387,"Object"],[44,22,3,393],[44,23,3,394,"source"],[44,29,3,393],[44,30,3,386],[44,31,3,379],[44,32,3,403,"forEach"],[44,39,3,379],[44,40,3,411],[44,50,3,421,"key"],[44,53,3,411],[44,55,3,426],[45,0,3,428,"Object"],[45,10,3,428,"Object"],[45,16,3,434],[45,17,3,435,"defineProperty"],[45,31,3,428],[45,32,3,450,"target"],[45,38,3,428],[45,40,3,458,"key"],[45,43,3,428],[45,45,3,463,"Object"],[45,51,3,469],[45,52,3,470,"getOwnPropertyDescriptor"],[45,76,3,463],[45,77,3,495,"source"],[45,83,3,463],[45,85,3,503,"key"],[45,88,3,463],[45,89,3,428],[46,0,3,511],[46,9,3,379],[47,0,3,515],[48,0,3,517],[50,0,3,518],[50,11,3,525,"target"],[50,17,3,518],[51,0,3,534],[53,0,5,0],[53,11,5,9,"_defineProperty"],[53,26,5,0],[53,27,5,25,"obj"],[53,30,5,0],[53,32,5,30,"key"],[53,35,5,0],[53,37,5,35,"value"],[53,42,5,0],[53,44,5,42],[54,0,5,44],[54,8,5,48,"key"],[54,11,5,51],[54,15,5,55,"obj"],[54,18,5,44],[54,20,5,60],[55,0,5,62,"Object"],[55,6,5,62,"Object"],[55,12,5,68],[55,13,5,69,"defineProperty"],[55,27,5,62],[55,28,5,84,"obj"],[55,31,5,62],[55,33,5,89,"key"],[55,36,5,62],[55,38,5,94],[56,0,5,96,"value"],[56,8,5,96,"value"],[56,13,5,101],[56,15,5,103,"value"],[56,20,5,94],[57,0,5,110,"enumerable"],[57,8,5,110,"enumerable"],[57,18,5,120],[57,20,5,122],[57,24,5,94],[58,0,5,128,"configurable"],[58,8,5,128,"configurable"],[58,20,5,140],[58,22,5,142],[58,26,5,94],[59,0,5,148,"writable"],[59,8,5,148,"writable"],[59,16,5,156],[59,18,5,158],[60,0,5,94],[60,7,5,62],[61,0,5,168],[61,5,5,44],[61,11,5,174],[62,0,5,176,"obj"],[62,6,5,176,"obj"],[62,9,5,179],[62,10,5,180,"key"],[62,13,5,179],[62,14,5,176],[62,17,5,187,"value"],[62,22,5,176],[63,0,5,195],[65,0,5,196],[65,11,5,203,"obj"],[65,14,5,196],[66,0,5,209],[68,0,12,0],[68,6,12,6,"queryString"],[68,17,12,17],[68,20,12,20,"require"],[68,31,12,27],[68,66,12,0],[70,0,14,7],[70,6,14,13,"getParamsFromPath"],[70,23,14,30],[70,26,14,33],[70,35,14,13,"getParamsFromPath"],[70,52,14,33],[70,53,14,34,"inputParams"],[70,64,14,33],[70,66,14,47,"pathMatch"],[70,75,14,33],[70,77,14,58,"pathMatchKeys"],[70,90,14,33],[70,92,14,76],[71,0,15,2],[71,8,15,8,"params"],[71,14,15,14],[71,17,15,17,"pathMatch"],[71,26,15,26],[71,27,15,27,"slice"],[71,32,15,17],[71,33,15,33],[71,34,15,17],[71,36,15,36,"reduce"],[71,42,15,17],[71,43,16,2],[71,53,16,3,"paramsOut"],[71,62,16,2],[71,64,16,14,"matchResult"],[71,75,16,2],[71,77,16,27,"i"],[71,78,16,2],[71,80,16,33],[72,0,17,4],[72,10,17,10,"key"],[72,13,17,13],[72,16,17,16,"pathMatchKeys"],[72,29,17,29],[72,30,17,30,"i"],[72,31,17,29],[72,32,17,4],[74,0,19,4],[74,10,19,8],[74,11,19,9,"key"],[74,14,19,8],[74,18,19,16,"key"],[74,21,19,19],[74,22,19,20,"asterisk"],[74,30,19,4],[74,32,19,30],[75,0,20,6],[75,15,20,13,"paramsOut"],[75,24,20,6],[76,0,21,5],[78,0,23,4],[78,10,23,10,"paramName"],[78,19,23,19],[78,22,23,22,"key"],[78,25,23,25],[78,26,23,26,"name"],[78,30,23,4],[79,0,24,4],[79,10,24,8,"decodedMatchResult"],[79,28,24,4],[81,0,26,4],[81,10,26,8,"matchResult"],[81,21,26,4],[81,23,26,21],[82,0,27,6],[82,12,27,10],[83,0,28,8,"decodedMatchResult"],[83,10,28,8,"decodedMatchResult"],[83,28,28,26],[83,31,28,29,"decodeURIComponent"],[83,49,28,47],[83,50,28,48,"matchResult"],[83,61,28,47],[83,62,28,8],[84,0,29,7],[84,9,27,6],[84,10,29,8],[84,17,29,15,"e"],[84,18,29,8],[84,20,29,18],[84,21,30,7],[85,0,31,5],[87,0,33,4,"paramsOut"],[87,6,33,4,"paramsOut"],[87,15,33,13],[87,16,33,14,"paramName"],[87,25,33,13],[87,26,33,4],[87,29,33,27,"decodedMatchResult"],[87,47,33,45],[87,51,33,49,"matchResult"],[87,62,33,4],[88,0,34,4],[88,13,34,11,"paramsOut"],[88,22,34,4],[89,0,35,3],[89,5,15,17],[89,7,35,5,"_objectSpread"],[89,20,35,18],[89,21,35,19],[89,23,35,18],[89,25,35,23,"inputParams"],[89,36,35,18],[89,37,15,17],[89,38,15,2],[90,0,36,2],[90,11,36,9,"params"],[90,17,36,2],[91,0,37,1],[91,3,14,7],[95,0,39,0],[95,6,39,6,"getRestOfPath"],[95,19,39,19],[95,22,39,22],[95,31,39,6,"getRestOfPath"],[95,44,39,22],[95,45,39,23,"pathMatch"],[95,54,39,22],[95,56,39,34,"pathMatchKeys"],[95,69,39,22],[95,71,39,52],[96,0,40,2],[96,8,40,8,"rest"],[96,12,40,12],[96,15,40,15,"pathMatch"],[96,24,40,24],[96,25,40,25,"pathMatchKeys"],[96,38,40,38],[96,39,40,39,"findIndex"],[96,48,40,25],[96,49,40,49],[96,59,40,49,"k"],[96,60,40,50],[97,0,40,50],[97,13,40,54,"k"],[97,14,40,55],[97,15,40,56,"asterisk"],[97,23,40,50],[98,0,40,50],[98,5,40,25],[98,9,40,68],[98,10,40,24],[98,11,40,2],[99,0,41,2],[99,11,41,9,"rest"],[99,15,41,2],[100,0,42,1],[100,3,39,0],[102,0,44,0],[102,6,44,6,"determineDelimiter"],[102,24,44,24],[102,27,44,27],[102,36,44,6,"determineDelimiter"],[102,54,44,27],[102,55,44,28,"uri"],[102,58,44,27],[102,60,44,33,"uriPrefix"],[102,69,44,27],[102,71,44,47],[103,0,45,2],[103,8,45,6,"Array"],[103,13,45,11],[103,14,45,12,"isArray"],[103,21,45,6],[103,22,45,20,"uriPrefix"],[103,31,45,6],[103,32,45,2],[103,34,45,32],[104,0,46,4],[104,10,46,8,"uriPrefix"],[104,19,46,17],[104,20,46,18,"length"],[104,26,46,8],[104,31,46,29],[104,32,46,4],[104,34,46,32],[104,41,46,39,"uriPrefix"],[104,50,46,48],[104,51,46,49],[104,52,46,48],[104,53,46,32],[106,0,48,4],[106,27,48,23,"uriPrefix"],[106,36,48,4],[106,196,48,34],[107,0,48,34],[109,0,48,34],[110,0,48,34],[111,0,48,34],[112,0,48,34],[113,0,48,34],[114,0,48,34],[115,0,48,34],[116,0,48,34],[118,0,48,34],[118,12,48,13,"prefix"],[118,19,48,34],[119,0,49,6],[119,12,49,10,"uri"],[119,15,49,13],[119,16,49,14,"startsWith"],[119,26,49,10],[119,27,49,25,"prefix"],[119,34,49,10],[119,35,49,6],[119,37,49,34],[119,44,49,41,"prefix"],[119,51,49,34],[120,0,50,5],[122,0,52,4],[122,13,52,11],[122,17,52,4],[123,0,53,3],[125,0,55,2],[125,11,55,9,"uriPrefix"],[125,20,55,2],[126,0,56,1],[126,3,44,0],[128,0,58,7],[128,6,58,13,"urlToPathAndParams"],[128,24,58,31],[128,27,58,34],[128,36,58,13,"urlToPathAndParams"],[128,54,58,34],[128,55,58,35,"url"],[128,58,58,34],[128,60,58,40,"uriPrefix"],[128,69,58,34],[128,71,58,54],[129,0,59,2],[129,8,59,8,"searchMatch"],[129,19,59,19],[129,22,59,22,"url"],[129,25,59,25],[129,26,59,26,"match"],[129,31,59,22],[129,32,59,32],[129,46,59,22],[129,47,59,2],[131,0,58,54],[131,16,60,37,"searchMatch"],[131,27,60,48],[131,31,60,52],[131,32,60,53],[131,36,60,52],[131,38,60,59,"url"],[131,41,60,52],[131,43,60,64],[131,45,60,52],[131,46,58,54],[132,0,58,54],[133,0,58,54],[133,8,60,11,"urlWithoutQuery"],[133,23,58,54],[134,0,58,54],[134,8,60,28,"query"],[134,13,58,54],[136,0,61,2],[136,8,61,8,"params"],[136,14,61,14],[136,17,61,17,"queryString"],[136,28,61,28],[136,29,61,29,"parse"],[136,34,61,17],[136,35,61,35,"query"],[136,40,61,17],[136,41,61,2],[137,0,62,2],[137,8,62,8,"delimiter"],[137,17,62,17],[137,20,62,20,"determineDelimiter"],[137,38,62,38],[137,39,62,39,"urlWithoutQuery"],[137,54,62,38],[137,56,62,56,"uriPrefix"],[137,65,62,38],[137,66,62,20],[137,70,62,70],[137,75,62,2],[138,0,63,2],[138,8,63,6,"path"],[138,12,63,10],[138,15,63,13,"urlWithoutQuery"],[138,30,63,28],[138,31,63,29,"split"],[138,36,63,13],[138,37,63,35,"delimiter"],[138,46,63,13],[138,48,63,46],[138,49,63,13],[138,50,63,2],[140,0,65,2],[140,8,65,6,"path"],[140,12,65,10],[140,17,65,15,"undefined"],[140,26,65,2],[140,28,65,26],[141,0,66,4,"path"],[141,6,66,4,"path"],[141,10,66,8],[141,13,66,11,"urlWithoutQuery"],[141,28,66,4],[142,0,67,3],[144,0,69,2],[144,8,69,6,"path"],[144,12,69,10],[144,17,69,15],[144,20,69,2],[144,22,69,20],[145,0,70,4,"path"],[145,6,70,4,"path"],[145,10,70,8],[145,13,70,11],[145,15,70,4],[146,0,71,3],[148,0,73,2],[148,8,73,6,"path"],[148,12,73,10],[148,13,73,11,"path"],[148,17,73,15],[148,18,73,16,"length"],[148,24,73,11],[148,27,73,25],[148,28,73,10],[148,29,73,6],[148,34,73,32],[148,37,73,2],[148,39,73,37],[149,0,74,4,"path"],[149,6,74,4,"path"],[149,10,74,8],[149,13,74,11,"path"],[149,17,74,15],[149,18,74,16,"slice"],[149,23,74,11],[149,24,74,22],[149,25,74,11],[149,27,74,25],[149,28,74,26],[149,29,74,11],[149,30,74,4],[150,0,75,3],[152,0,77,2],[152,11,77,9],[153,0,78,4,"path"],[153,6,78,4,"path"],[153,10,78,8],[153,12,78,4,"path"],[153,16,77,9],[154,0,79,4,"params"],[154,6,79,4,"params"],[154,12,79,10],[154,14,79,4,"params"],[155,0,77,9],[155,5,77,2],[156,0,81,1],[156,3,58,7],[160,0,82,7],[160,6,82,13,"createPathParser"],[160,22,82,29],[160,25,82,32],[160,34,82,13,"createPathParser"],[160,50,82,32],[160,51,82,33,"childRouters"],[160,63,82,32],[160,65,82,47,"routeConfigs"],[160,77,82,32],[160,86,85,6],[161,0,85,6],[161,28,83,2,"paths"],[161,33,85,6],[162,0,85,6],[162,8,83,9,"pathConfigs"],[162,19,85,6],[162,47,83,23],[162,49,85,6],[163,0,85,6],[163,8,84,2,"disableRouteNamePaths"],[163,29,85,6],[163,38,84,2,"disableRouteNamePaths"],[163,59,85,6],[164,0,86,2],[164,8,86,8,"pathsByRouteNames"],[164,25,86,25],[164,28,86,28],[164,30,86,2],[165,0,87,2],[165,8,87,6,"paths"],[165,13,87,11],[165,16,87,14],[165,18,87,2],[166,0,89,2,"Object"],[166,4,89,2,"Object"],[166,10,89,8],[166,11,89,9,"keys"],[166,15,89,2],[166,16,89,14,"childRouters"],[166,28,89,2],[166,30,89,28,"forEach"],[166,37,89,2],[166,38,89,36],[166,48,89,36,"routeName"],[166,57,89,45],[166,59,89,49],[167,0,90,4],[167,10,90,8,"pathPattern"],[167,21,90,4],[169,0,92,4],[169,10,92,8,"pathConfigs"],[169,21,92,19],[169,22,92,20,"routeName"],[169,31,92,19],[169,32,92,8],[169,37,92,35,"undefined"],[169,46,92,4],[169,48,92,46],[170,0,93,6,"pathPattern"],[170,8,93,6,"pathPattern"],[170,19,93,17],[170,22,93,20,"pathConfigs"],[170,33,93,31],[170,34,93,32,"routeName"],[170,43,93,31],[170,44,93,6],[171,0,94,5],[171,7,92,4],[171,13,94,11],[172,0,95,6,"pathPattern"],[172,8,95,6,"pathPattern"],[172,19,95,17],[172,22,95,20,"routeConfigs"],[172,34,95,32],[172,35,95,33,"routeName"],[172,44,95,32],[172,45,95,20],[172,46,95,44,"path"],[172,50,95,6],[173,0,96,5],[175,0,98,4],[175,10,98,8,"pathPattern"],[175,21,98,19],[175,26,98,24,"undefined"],[175,35,98,4],[175,37,98,35],[176,0,100,6,"pathPattern"],[176,8,100,6,"pathPattern"],[176,19,100,17],[176,22,100,20,"disableRouteNamePaths"],[176,43,100,41],[176,46,100,44],[176,50,100,41],[176,53,100,51,"routeName"],[176,62,100,6],[177,0,101,5],[179,0,103,4],[179,30,103,14,"pathPattern"],[179,41,103,25],[179,46,103,30],[179,50,103,14],[179,54,103,38],[179,61,103,45,"pathPattern"],[179,72,103,38],[179,77,103,61],[179,85,103,4],[179,87,103,71],[179,105,103,89,"concat"],[179,111,103,71],[179,112,103,96,"routeName"],[179,121,103,71],[179,123,103,107],[179,165,103,71],[179,166,103,4],[180,0,105,4],[180,10,105,10,"isPathMatchable"],[180,25,105,25],[180,28,105,28,"pathPattern"],[180,39,105,39],[180,44,105,44],[180,48,105,4],[181,0,107,4],[181,10,107,10,"exactReKeys"],[181,21,107,21],[181,24,107,24],[181,26,107,4],[182,0,108,4],[182,10,108,10,"exactRe"],[182,17,108,17],[182,20,108,20,"isPathMatchable"],[182,35,108,35],[182,38,108,38],[182,65,108,51,"pathPattern"],[182,76,108,38],[182,78,108,64,"exactReKeys"],[182,89,108,38],[182,90,108,35],[182,93,108,79],[182,97,108,4],[183,0,109,4],[183,10,109,10,"extendedPathReKeys"],[183,28,109,28],[183,31,109,31],[183,33,109,4],[184,0,110,4],[184,10,110,10,"isWildcard"],[184,20,110,20],[184,23,110,23,"pathPattern"],[184,34,110,34],[184,39,110,39],[184,41,110,23],[184,45,110,45],[184,46,110,46,"isPathMatchable"],[184,61,110,4],[185,0,111,4],[185,10,111,10,"extendedPathRe"],[185,24,111,24],[185,27,111,27],[185,54,111,40,"isWildcard"],[185,64,111,50],[185,67,111,53],[185,70,111,50],[185,73,111,59],[185,76,111,62,"concat"],[185,82,111,59],[185,83,111,69,"pathPattern"],[185,94,111,59],[185,96,111,82],[185,100,111,59],[185,101,111,27],[185,103,111,89,"extendedPathReKeys"],[185,121,111,27],[185,122,111,4],[186,0,112,4,"pathsByRouteNames"],[186,6,112,4,"pathsByRouteNames"],[186,23,112,21],[186,24,112,22,"routeName"],[186,33,112,21],[186,34,112,4],[186,37,112,35],[187,0,113,6,"exactRe"],[187,8,113,6,"exactRe"],[187,15,113,13],[187,17,113,6,"exactRe"],[187,24,112,35],[188,0,114,6,"exactReKeys"],[188,8,114,6,"exactReKeys"],[188,19,114,17],[188,21,114,6,"exactReKeys"],[188,32,112,35],[189,0,115,6,"extendedPathRe"],[189,8,115,6,"extendedPathRe"],[189,22,115,20],[189,24,115,6,"extendedPathRe"],[189,38,112,35],[190,0,116,6,"extendedPathReKeys"],[190,8,116,6,"extendedPathReKeys"],[190,26,116,24],[190,28,116,6,"extendedPathReKeys"],[190,46,112,35],[191,0,117,6,"isWildcard"],[191,8,117,6,"isWildcard"],[191,18,117,16],[191,20,117,6,"isWildcard"],[191,30,112,35],[192,0,118,6,"toPath"],[192,8,118,6,"toPath"],[192,14,118,12],[192,16,118,14,"pathPattern"],[192,27,118,25],[192,32,118,30],[192,36,118,14],[192,39,118,37],[193,0,118,37],[193,17,118,43],[193,19,118,37],[194,0,118,37],[194,9,118,14],[194,12,118,48],[194,39,118,56,"pathPattern"],[194,50,118,48],[195,0,112,35],[195,7,112,4],[196,0,120,3],[196,5,89,2],[197,0,121,2,"paths"],[197,4,121,2,"paths"],[197,9,121,7],[197,12,121,10,"Object"],[197,18,121,16],[197,19,121,17,"entries"],[197,26,121,10],[197,27,121,25,"pathsByRouteNames"],[197,44,121,10],[197,45,121,2],[199,0,123,2],[199,8,123,8,"getActionForPathAndParams"],[199,33,123,33],[199,36,123,36],[199,45,123,8,"getActionForPathAndParams"],[199,70,123,36],[199,73,123,78],[200,0,123,78],[200,10,123,37,"pathToResolve"],[200,23,123,78],[200,94,123,53],[200,96,123,78],[201,0,123,78],[201,10,123,57,"inputParams"],[201,21,123,78],[201,92,123,71],[201,94,123,78],[203,0,125,4],[203,28,125,36,"paths"],[203,33,125,4],[203,200,125,43],[204,0,125,43],[206,0,125,43],[207,0,125,43],[208,0,125,43],[209,0,125,43],[210,0,125,43],[211,0,125,43],[212,0,125,43],[213,0,125,43],[215,0,125,43],[217,0,125,43],[219,0,125,43],[219,12,125,16,"routeName"],[219,23,125,43],[220,0,125,43],[220,12,125,27,"path"],[220,18,125,43],[221,0,125,43],[221,12,127,8,"exactRe"],[221,20,125,43],[221,23,131,10,"path"],[221,29,125,43],[221,30,127,8,"exactRe"],[221,37,125,43],[222,0,125,43],[222,12,128,8,"exactReKeys"],[222,24,125,43],[222,27,131,10,"path"],[222,33,125,43],[222,34,128,8,"exactReKeys"],[222,45,125,43],[223,0,125,43],[223,12,129,8,"extendedPathRe"],[223,28,125,43],[223,31,131,10,"path"],[223,37,125,43],[223,38,129,8,"extendedPathRe"],[223,52,125,43],[224,0,125,43],[224,12,130,8,"extendedPathReKeys"],[224,32,125,43],[224,35,131,10,"path"],[224,41,125,43],[224,42,130,8,"extendedPathReKeys"],[224,60,125,43],[225,0,132,6],[225,12,132,12,"childRouter"],[225,25,132,23],[225,28,132,26,"childRouters"],[225,40,132,38],[225,41,132,39,"routeName"],[225,52,132,38],[225,53,132,6],[227,0,133,6],[227,12,133,12,"exactMatch"],[227,23,133,22],[227,26,133,25,"exactRe"],[227,34,133,32],[227,38,133,36,"exactRe"],[227,46,133,43],[227,47,133,44,"exec"],[227,51,133,36],[227,52,133,49,"pathToResolve"],[227,65,133,36],[227,66,133,6],[229,0,135,6],[229,12,135,10,"exactMatch"],[229,23,135,20],[229,27,135,24,"exactMatch"],[229,38,135,34],[229,39,135,35,"length"],[229,45,135,6],[229,47,135,43],[230,0,136,8],[230,14,136,14,"extendedMatch"],[230,28,136,27],[230,31,136,30,"extendedPathRe"],[230,47,136,44],[230,51,136,48,"extendedPathRe"],[230,67,136,62],[230,68,136,63,"exec"],[230,72,136,48],[230,73,136,68,"pathToResolve"],[230,86,136,48],[230,87,136,8],[232,0,137,8],[232,14,137,12,"childAction"],[232,25,137,23],[232,28,137,26],[232,32,137,8],[234,0,139,8],[234,14,139,12,"extendedMatch"],[234,28,139,25],[234,32,139,29,"childRouter"],[234,45,139,8],[234,47,139,42],[235,0,140,10],[235,16,140,16,"restOfPath"],[235,26,140,26],[235,29,140,29,"getRestOfPath"],[235,42,140,42],[235,43,140,43,"extendedMatch"],[235,57,140,42],[235,59,140,58,"extendedPathReKeys"],[235,79,140,42],[235,80,140,10],[236,0,141,10,"childAction"],[236,12,141,10,"childAction"],[236,23,141,21],[236,26,141,24,"childRouter"],[236,39,141,35],[236,40,141,36,"getActionForPathAndParams"],[236,65,141,24],[236,66,141,62,"restOfPath"],[236,76,141,24],[236,78,141,74,"inputParams"],[236,89,141,24],[236,90,141,10],[237,0,142,9],[239,0,144,8],[239,17,144,15,"NavigationActions"],[239,34,144,32],[239,35,144,33,"navigate"],[239,43,144,15],[239,44,144,42],[240,0,145,10,"routeName"],[240,12,145,10,"routeName"],[240,21,145,19],[240,23,145,10,"routeName"],[240,34,144,42],[241,0,146,10,"params"],[241,12,146,10,"params"],[241,18,146,16],[241,20,146,18,"getParamsFromPath"],[241,37,146,35],[241,38,146,36,"inputParams"],[241,49,146,35],[241,51,146,49,"exactMatch"],[241,62,146,35],[241,64,146,61,"exactReKeys"],[241,76,146,35],[241,77,144,42],[242,0,147,10,"action"],[242,12,147,10,"action"],[242,18,147,16],[242,20,147,18,"childAction"],[243,0,144,42],[243,11,144,15],[243,12,144,8],[244,0,149,7],[245,0,150,5],[247,0,152,4],[247,28,152,36,"paths"],[247,33,152,4],[247,200,152,43],[248,0,152,43],[250,0,152,43],[251,0,152,43],[252,0,152,43],[253,0,152,43],[254,0,152,43],[255,0,152,43],[256,0,152,43],[257,0,152,43],[259,0,152,43],[261,0,152,43],[263,0,152,43],[263,12,152,16,"routeName"],[263,23,152,43],[264,0,152,43],[264,12,152,27,"path"],[264,18,152,43],[265,0,152,43],[265,12,154,8,"extendedPathRe"],[265,28,152,43],[265,31,156,10,"path"],[265,37,152,43],[265,38,154,8,"extendedPathRe"],[265,52,152,43],[266,0,152,43],[266,12,155,8,"extendedPathReKeys"],[266,32,152,43],[266,35,156,10,"path"],[266,41,152,43],[266,42,155,8,"extendedPathReKeys"],[266,60,152,43],[267,0,157,6],[267,12,157,12,"childRouter"],[267,25,157,23],[267,28,157,26,"childRouters"],[267,40,157,38],[267,41,157,39,"routeName"],[267,52,157,38],[267,53,157,6],[269,0,158,6],[269,12,158,12,"extendedMatch"],[269,27,158,25],[269,30,158,28,"extendedPathRe"],[269,46,158,42],[269,50,158,46,"extendedPathRe"],[269,66,158,60],[269,67,158,61,"exec"],[269,71,158,46],[269,72,158,66,"pathToResolve"],[269,85,158,46],[269,86,158,6],[271,0,160,6],[271,12,160,10,"extendedMatch"],[271,27,160,23],[271,31,160,27,"extendedMatch"],[271,46,160,40],[271,47,160,41,"length"],[271,53,160,6],[271,55,160,49],[272,0,161,8],[272,14,161,14,"restOfPath"],[272,25,161,24],[272,28,161,27,"getRestOfPath"],[272,41,161,40],[272,42,161,41,"extendedMatch"],[272,57,161,40],[272,59,161,56,"extendedPathReKeys"],[272,79,161,40],[272,80,161,8],[274,0,162,8],[274,14,162,12,"childAction"],[274,26,162,23],[274,29,162,26],[274,33,162,8],[276,0,164,8],[276,14,164,12,"childRouter"],[276,27,164,8],[276,29,164,25],[277,0,165,10,"childAction"],[277,12,165,10,"childAction"],[277,24,165,21],[277,27,165,24,"childRouter"],[277,40,165,35],[277,41,165,36,"getActionForPathAndParams"],[277,66,165,24],[277,67,165,62,"restOfPath"],[277,78,165,24],[277,80,165,74,"inputParams"],[277,91,165,24],[277,92,165,10],[278,0,166,9],[280,0,168,8],[280,14,168,12],[280,15,168,13,"childAction"],[280,27,168,8],[280,29,168,26],[281,0,169,10],[282,0,170,9],[284,0,172,8],[284,17,172,15,"NavigationActions"],[284,34,172,32],[284,35,172,33,"navigate"],[284,43,172,15],[284,44,172,42],[285,0,173,10,"routeName"],[285,12,173,10,"routeName"],[285,21,173,19],[285,23,173,10,"routeName"],[285,34,172,42],[286,0,174,10,"params"],[286,12,174,10,"params"],[286,18,174,16],[286,20,174,18,"getParamsFromPath"],[286,37,174,35],[286,38,174,36,"inputParams"],[286,49,174,35],[286,51,174,49,"extendedMatch"],[286,66,174,35],[286,68,174,64,"extendedPathReKeys"],[286,88,174,35],[286,89,172,42],[287,0,175,10,"action"],[287,12,175,10,"action"],[287,18,175,16],[287,20,175,18,"childAction"],[288,0,172,42],[288,11,172,15],[288,12,172,8],[289,0,177,7],[290,0,178,5],[292,0,180,4],[292,13,180,11],[292,17,180,4],[293,0,181,3],[293,5,123,2],[295,0,183,2],[295,8,183,8,"getPathAndParamsForRoute"],[295,32,183,32],[295,35,183,35],[295,44,183,8,"getPathAndParamsForRoute"],[295,68,183,35],[295,69,183,35,"route"],[295,74,183,40],[295,76,183,44],[296,0,183,44],[296,10,185,6,"routeName"],[296,19,183,44],[296,22,187,8,"route"],[296,27,183,44],[296,28,185,6,"routeName"],[296,37,183,44],[297,0,183,44],[297,10,186,6,"params"],[297,16,183,44],[297,19,187,8,"route"],[297,24,183,44],[297,25,186,6,"params"],[297,31,183,44],[298,0,188,4],[298,10,188,10,"childRouter"],[298,21,188,21],[298,24,188,24,"childRouters"],[298,36,188,36],[298,37,188,37,"routeName"],[298,46,188,36],[298,47,188,4],[299,0,183,44],[299,34,192,8,"pathsByRouteNames"],[299,51,192,25],[299,52,192,26,"routeName"],[299,61,192,25],[299,62,183,44],[300,0,183,44],[300,10,190,6,"toPath"],[300,16,183,44],[300,41,190,6,"toPath"],[300,47,183,44],[301,0,183,44],[301,10,191,6,"exactReKeys"],[301,21,183,44],[301,46,191,6,"exactReKeys"],[301,57,183,44],[302,0,193,4],[302,10,193,10,"subPath"],[302,17,193,17],[302,20,193,20,"toPath"],[302,26,193,26],[302,27,193,27,"params"],[302,33,193,26],[302,34,193,4],[303,0,194,4],[303,10,194,10,"nonPathParams"],[303,23,194,23],[303,26,194,26],[303,28,194,4],[305,0,196,4],[305,10,196,8,"params"],[305,16,196,4],[305,18,196,16],[306,0,197,6,"Object"],[306,8,197,6,"Object"],[306,14,197,12],[306,15,197,13,"keys"],[306,19,197,6],[306,20,197,18,"params"],[306,26,197,6],[306,28,197,26,"filter"],[306,34,197,6],[306,35,197,33],[306,45,197,33,"paramName"],[306,54,197,42],[307,0,197,42],[307,17,197,46],[307,18,197,47,"exactReKeys"],[307,29,197,58],[307,30,197,59,"find"],[307,34,197,47],[307,35,197,64],[307,45,197,64,"k"],[307,46,197,65],[308,0,197,65],[308,19,197,69,"k"],[308,20,197,70],[308,21,197,71,"name"],[308,25,197,69],[308,30,197,80,"paramName"],[308,39,197,65],[309,0,197,65],[309,11,197,47],[309,12,197,42],[310,0,197,42],[310,9,197,6],[310,11,197,92,"forEach"],[310,18,197,6],[310,19,197,100],[310,29,197,100,"paramName"],[310,38,197,109],[310,40,197,113],[311,0,198,8,"nonPathParams"],[311,10,198,8,"nonPathParams"],[311,23,198,21],[311,24,198,22,"paramName"],[311,33,198,21],[311,34,198,8],[311,37,198,35,"params"],[311,43,198,41],[311,44,198,42,"paramName"],[311,53,198,41],[311,54,198,8],[312,0,199,7],[312,9,197,6],[313,0,200,5],[315,0,202,4],[315,10,202,8,"childRouter"],[315,21,202,4],[315,23,202,21],[316,0,205,6],[316,12,205,12,"child"],[316,17,205,17],[316,20,205,20,"childRouter"],[316,31,205,31],[316,32,205,32,"getPathAndParamsForState"],[316,56,205,20],[316,57,205,57,"route"],[316,62,205,20],[316,63,205,6],[317,0,206,6],[317,15,206,13],[318,0,207,8,"path"],[318,10,207,8,"path"],[318,14,207,12],[318,16,207,14,"subPath"],[318,23,207,21],[318,26,207,24],[318,29,207,27,"concat"],[318,35,207,24],[318,36,207,34,"subPath"],[318,43,207,24],[318,45,207,43],[318,48,207,24],[318,50,207,48,"concat"],[318,56,207,24],[318,57,207,55,"child"],[318,62,207,60],[318,63,207,61,"path"],[318,67,207,24],[318,68,207,21],[318,71,207,69,"child"],[318,76,207,74],[318,77,207,75,"path"],[318,81,206,13],[319,0,208,8,"params"],[319,10,208,8,"params"],[319,16,208,14],[319,18,208,16,"child"],[319,23,208,21],[319,24,208,22,"params"],[319,30,208,16],[319,33,208,31,"_objectSpread"],[319,46,208,44],[319,47,208,45],[319,49,208,44],[319,51,208,49,"nonPathParams"],[319,64,208,44],[319,66,208,64],[319,68,208,44],[319,70,208,68,"child"],[319,75,208,73],[319,76,208,74,"params"],[319,82,208,44],[319,83,208,16],[319,86,208,84,"nonPathParams"],[320,0,206,13],[320,9,206,6],[321,0,210,5],[323,0,212,4],[323,13,212,11],[324,0,213,6,"path"],[324,8,213,6,"path"],[324,12,213,10],[324,14,213,12,"subPath"],[324,21,212,11],[325,0,214,6,"params"],[325,8,214,6,"params"],[325,14,214,12],[325,16,214,14,"nonPathParams"],[326,0,212,11],[326,7,212,4],[327,0,216,3],[327,5,183,2],[329,0,218,2],[329,11,218,9],[330,0,219,4,"getActionForPathAndParams"],[330,6,219,4,"getActionForPathAndParams"],[330,31,219,29],[330,33,219,4,"getActionForPathAndParams"],[330,58,218,9],[331,0,220,4,"getPathAndParamsForRoute"],[331,6,220,4,"getPathAndParamsForRoute"],[331,30,220,28],[331,32,220,4,"getPathAndParamsForRoute"],[332,0,218,9],[332,5,218,2],[333,0,222,1],[333,3,82,7]],"functionMap":{"names":["ownKeys","symbols.filter$argument_0","<global>","_objectSpread","ownKeys.forEach$argument_0","_defineProperty","getParamsFromPath","pathMatch.slice.reduce$argument_0","getRestOfPath","pathMatchKeys.findIndex$argument_0","determineDelimiter","urlToPathAndParams","createPathParser","Object.keys.forEach$argument_0","<anonymous>","getActionForPathAndParams","getPathAndParamsForRoute","Object.keys.filter$argument_0","exactReKeys.find$argument_0","Object.keys.filter.forEach$argument_0"],"mappings":"AAA,gNC,kFD,mDE;ACE,wLC,6DD,sKC,oGD,uBD;AGE,iNH;iCIS;ECE;GDmB;CJE;sBME;iDCC,eD;CNE;2BQE;CRY;kCSE;CTuB;gCUC;oCCO;qCC6B,QD;GDE;oCGG;GH0D;mCIE;iCCc,+BC,yBD,CD,UG;OHE;GJiB;CVM"}},"type":"js/module"}]}